{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/riadn/Desktop/AWS_PUSH_LAST/Projet-AWS-videoConferencing/frontend/src/app/%28layout-app%29/auth/register/page.tsx"],"sourcesContent":["\"use client\"\n\nimport Link from \"next/link\";\nimport \"./register.css\"\nimport { useState } from \"react\";\nimport { register } from \"@/services/auth\";\n\n\nexport default function Login() {\n        const [pending, setPending] = useState<boolean>(false)\n        const [email, setEmail] = useState<string>('');\n        const [firstname, setFirstname] = useState<string>('');\n        const [lastname, setLastname] = useState<string>('');\n        const [password, setPassword] = useState<string>('');\n        const [error, setError] = useState<string|null>(null);\n    \n        const handleSubmit = async (e: FormData) => {\n            if (pending) {\n                return \n            }\n            setPending(true)\n            try {\n                let res = await register(e);\n            } catch (error) {\n                setTimeout(() => setError(null), 1500)\n                setError(\"Certain champ sont mal rempli !\")\n            }\n            setPending(false)\n        }\n\n    return (\n      <div className=\"auth container\">\n        <div className=\"auth-wrapper\">\n        <h1>S'inscrire</h1>\n        <p>S'inscrire pour passer des appels d'une autre maniere</p>\n        {error && <p className=\"message msg-error text-center\">{error}</p>}\n        <form action={handleSubmit} method=\"post\">\n            <div className=\"form-group\">\n                <label htmlFor=\"firstname\" className=\"form-label\">Nom</label>\n                <div className=\"form-input\">\n                    <input type=\"text\" name=\"firstname\" required value={firstname} onChange={(e) => setFirstname(e.target.value)} id=\"firstname\" autoComplete=\"false\" placeholder=\"ex: mymeet\" />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"lastname\" className=\"form-label\">Prenom</label>\n                <div className=\"form-input\">\n                    <input type=\"text\" name=\"lastname\" required value={lastname} onChange={(e) => setLastname(e.target.value)} id=\"lastname\" autoComplete=\"false\" placeholder=\"ex: mymeet\" />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                <div className=\"form-input\">\n                    <input type=\"email\" name=\"email\" required value={email} onChange={(e) => setEmail(e.target.value)} id=\"email\" autoComplete=\"false\" placeholder=\"ex: mymeet@gmail.com\" />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"password\" className=\"form-label\">Mot de passe</label>\n                <div className=\"form-input\">\n                    <input type=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)} name=\"password\" autoComplete=\"false\" id=\"password\" placeholder=\"votre mot de passe\" />\n                </div>\n            </div>\n\n            <button className={\"btn btn-main jc-c ai-c \"+(pending ? \"disable\" : \"\")} type=\"submit\">{pending ? \"Loading...\" : \"S'inscrire\"}</button>\n            <Link href={\"/auth/login\"}>Deja membre ? <span className=\"clr_main\">se connecter</span></Link>\n        </form>\n      </div>\n      </div>\n    );\n  }"],"names":[],"mappings":"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"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}