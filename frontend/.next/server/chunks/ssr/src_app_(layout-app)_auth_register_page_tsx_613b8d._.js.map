{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/riadn/Desktop/AWS_PUSH_LAST/Projet-AWS-read/frontend/src/app/%28layout-app%29/auth/register/page.tsx"],"sourcesContent":["\"use client\"\n\nimport Link from \"next/link\";\nimport \"./register.css\"\nimport { useState } from \"react\";\nimport { register } from \"@/services/auth\";\nimport { useRouter } from 'next/navigation';\n\n\nexport default function Register() {\n        const router = useRouter(); // handle change of url\n        const [pending, setPending] = useState<boolean>(false)\n        const [email, setEmail] = useState<string>('');\n        const [username, setUsername] = useState<string>('');\n        const [password, setPassword] = useState<string>('');\n        const [error, setError] = useState<string|null>(null);\n    \n        const handleSubmit = async (e: FormData) => {\n            console.log(\"RESPONSEFORM\" , e);\n            console.log(\"email :\", e.get(\"email\"));\n            console.log(\"username :\", e.get(\"username\"));\n            console.log(\"password :\", e.get(\"password\"));\n            if (pending) {\n                return \n            }\n            setPending(true)\n\n            try {\n                console.log(\"Registration Starting\");\n                let res = await register(e);\n                console.log(\"RESPONSE\" , res);\n                console.log(\"RESPONSE IS OK :\" ,res.ok);\n                //   redirect('/videoConference');\n                if (res.ok){\n                    console.log(\"IN RES OK\");\n                    console.log(\"The user has been registered\")\n                    router.push('/auth/login');\n                }\n            } catch (error) {\n                console.log(\"LOGIN EROOR\", error);\n                setTimeout(() => setError(null), 1500)\n                setError(\"mot de passe ou email erron√© !\")\n            }\n            setPending(false)\n        }\n\n    return (\n      <div className=\"auth container\">\n        <div className=\"auth-wrapper\">\n        <h1>S'inscrire</h1>\n        <p>S'inscrire pour passer des appels d'une autre maniere</p>\n        {error && <p className=\"message msg-error text-center\">{error}</p>}\n        <form action={handleSubmit} method=\"post\">\n            <div className=\"form-group\">\n                <label htmlFor=\"username\" className=\"form-label\">Nom d'utilisateur</label>\n                <div className=\"form-input\">\n                    <input type=\"text\" name=\"username\" required value={username} onChange={(e) => setUsername(e.target.value)} id=\"username\" autoComplete=\"false\" placeholder=\"ex: mymeet\" />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                <div className=\"form-input\">\n                    <input type=\"email\" name=\"email\" required value={email} onChange={(e) => setEmail(e.target.value)} id=\"email\" autoComplete=\"false\" placeholder=\"ex: mymeet@gmail.com\" />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"password\" className=\"form-label\">Mot de passe</label>\n                <div className=\"form-input\">\n                    <input type=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)} name=\"password\" autoComplete=\"false\" id=\"password\" placeholder=\"votre mot de passe\" />\n                </div>\n            </div>\n\n            <button className={\"btn btn-main jc-c ai-c \"+(pending ? \"disable\" : \"\")} type=\"submit\">{pending ? \"Loading...\" : \"S'inscrire\"}</button>\n            <Link href={\"/auth/login\"}>Deja membre ? <span className=\"clr_main\">se connecter</span></Link>\n        </form>\n      </div>\n      </div>\n    );\n  }"],"names":[],"mappings":"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"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}